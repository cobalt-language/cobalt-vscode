{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Cobalt",
	"patterns": [
		{"include": "#literals"},
		{"include": "#comments"},
		{"include": "#macros"},
		{"include": "#variables"},
		{"include": "#keywords"}
	],
	"repository": {
		"types": {
			"patterns": [
				{
					"name": "entity.name.type.cobalt",
					"match": "(\\.?[\\w_$]+(\\.[\\w_$]+)*)(\\s*[&*\\^]|\\s+(mut|const)\\s*[&*]|\\s*\\[.*?])*"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "constant.other.bool.cobalt",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.numeric.int.cobalt",
					"match": "\\b\\d+\\b"
				},
				{
					"name": "constant.numeric.float.cobalt",
					"match": "\\b(\\d+\\.\\d*|\\.\\d+)\\b"
				},
				{
					"name": "constant.character",
					"match": "'[^\\\\']'|'\\\\[^xuU]'|'\\\\x[0-9a-fA-F]{2}'|'\\\\u[0-9a-fA-F]{4}'|'\\\\U[0-9a-fA-F]{8}'"
				},
				{
					"name": "string.quoted.cobalt",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.cobalt",
							"match": "\\\\([^xuU]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.cobalt",
					"match": "\\b(if|while)\\b"
				},
				{
					"name": "keyword.other.cobalt",
					"match": "\\b((let|fn|module|import|type|cr)|(mut|const)(?!\\s*[&*]))\\b"
				},
				{
					"name": "entity.name.type.cobalt",
					"match": "\\b(bool|null|isize|usize|f16|f32|f64|f128|[iu]\\d+)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign.cobalt",
					"match": "#([^=].*)?$"
				},
				{
					"name": "comment.block.cobalt",
					"begin": "#=",
					"end": "=#",
					"beginCaptures": {
						"0": {"name": "comment.block.open.cobalt"}
					},
					"endCaptures": {
						"0": {"name": "comment.block.close.cobalt"}
					}
				}
			]
		},
		"macros": {
			"patterns": [
				{
					"name": "keyword.other.macro.func.cobalt",
					"begin": "@[\\w_$]+\\s*\\(",
					"end": "\\)"
				},
				{
					"name": "keyword.other.macro.var.cobalt",
					"match": "@[\\w_$]+(?!\\w*\\s\\()"
				}
			]
		},
		"parameters": {
			"patterns": [
				{
					"name": "meta.definition.function-parameters.cobalt",
					"match": "([\\w_$]+)\\s*:\\s*((\\.?[\\w_$]+(\\.[\\w_$]+)*)(\\s*[&*\\^]|\\s+(mut|const)\\s*[&*]|\\s*\\[.*?])*)\\s*((,\\s*([\\w_$]+)\\s*:\\s*(\\.?[\\w_$]+(\\.[\\w_$]+)*)(\\s*[&*\\^]|\\s+(mut|const)\\s*[&*]|\\s*\\[.*?])*)*)",
					"captures": {
						"1": {"name": "variable.parameter.cobalt"},
						"2": {"patterns": [{"include": "#types"}]},
						"7": {"patterns": [{"include": "#param-impl"}]}
					}
				}
			]
		},
		"param-impl": {
			"patterns": [
				{
					"name": "meta.definition.function-parameters.cobalt",
					"match": ",\\s*([\\w_$]+)\\s*:\\s*((\\.?[\\w_$]+(\\.[\\w_$]+)*)(\\s*[&*\\^]|\\s+(mut|const)\\s*[&*]|\\s*\\[.*?])*)\\s*((,\\s*([\\w_$]+)\\s*:\\s*(\\.?[\\w_$]+(\\.[\\w_$]+)*)(\\s*[&*\\^]|\\s+(mut|const)\\s*[&*]|\\s*\\[.*?])*)*)",
					"captures": {
						"1": {"name": "variable.parameter.cobalt"},
						"2": {"patterns": [{"include": "#types"}]},
						"7": {"patterns": [{"include": "#param-impl"}]}
					}
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "meta.definition.variable.cobalt",
					"match": "\\b(let|mut|const|type)\\s+(\\.?[\\w_$]+(\\.[\\w_$]+)*)(\\s*:\\s*((\\.?[\\w_$]+(\\.[\\w_$]+)*)(\\s*[&*\\^]|\\s+(mut|const)\\s*[&*]|\\s*\\[.*?])*))?",
					"captures": {
						"1": {"name": "keyword.other.cobalt"},
						"2": {"name": "variable.other.cobalt"},
						"5": {"patterns": [{"include": "#types"}]}
					}
				},
				{
					"name": "meta.definition.function.cobalt",
					"match": "\\b(fn|cr)\\s+(\\.?[\\w_$]+(\\.[\\w_$]+)*)\\s*\\(((\\s*([\\w_$]+))(\\s*:\\s*((\\.?[\\w_$]+(\\.[\\w_$]+)*)(\\s*[&*\\^]|\\s+(mut|const)\\s*[&*]|\\s*\\[.*?])*))\\s*(,\\s*([\\w_$]+)(\\s*:\\s*((\\.?[\\w_$]+(\\.[\\w_$]+)*)(\\s*[&*\\^]|\\s+(mut|const)\\s*[&*]|\\s*\\[.*?])*))\\s*)*)?\\)(\\s*:\\s*((\\.?[\\w_$]+(\\.[\\w_$]+)*)(\\s*[&*\\^]|\\s+(mut|const)\\s*[&*]|\\s*\\[.*?])*))?",
					"captures": {
						"1": {"name": "keyword.other.cobalt"},
						"2": {"name": "entity.name.function.cobalt"},
						"4": {"patterns": [{"include": "#parameters"}]},
						"22": {"patterns": [{"include": "#types"}]}
					}
				},
				{
					"name": "meta.definition.variable.fallback.cobalt",
					"match": "\\b(let|mut|const|type)\\s+(\\.?[\\w_$]+(\\.[\\w_$]+)*)",
					"captures": {
						"1": {"name": "keyword.other.cobalt"},
						"2": {"name": "variable.other.cobalt"}
					}
				},
				{
					"name": "meta.definition.function.fallback.cobalt",
					"match": "\\b(fn|cr)\\s+(\\.?[\\w_$]+(\\.[\\w_$]+)*)",
					"captures": {
						"1": {"name": "keyword.other.cobalt"},
						"2": {"name": "entity.name.function.cobalt"}
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.cobalt",
					"match": "[+-*/%<>^=]"
				},
				{
					"name": "keyword.operator.cast.cobalt",
					"match": "\\b:\\??\\s*((\\.?[\\w_$]+(\\.[\\w_$]+)*)(\\s*[&*\\^]|\\s+(mut|const)\\s*[&*]|\\s*\\[.*?])*)",
					"captures": {
						"1": {"patterns": [{"include": "#types"}]}
					}
				},
				{
					"name": "keyword.operator.cast.fallback.cobalt",
					"match": "\\b:\\??"
				}
			]
		}
	},
	"scopeName": "source.cobalt"
}
